=== tests/cases/conformance/types/mapped/mappedTypeModifiers.ts ===

type T = { a: number, b: string };
>T : T
>a : number
>b : string

type TU = { a: number | undefined, b: string | undefined };
>TU : TU
>a : number | undefined
>b : string | undefined

type TP = { a?: number, b?: string };
>TP : TP
>a : number | undefined
>b : string | undefined

type TR = { readonly a: number, readonly b: string };
>TR : TR
>a : number
>b : string

type TPR = { readonly a?: number, readonly b?: string };
>TPR : TPR
>a : number | undefined
>b : string | undefined

// Validate they all have the same keys
var v00: "a" | "b";
>v00 : "a" | "b"

var v00: keyof T;
>v00 : "a" | "b"
>T : T

var v00: keyof TU;
>v00 : "a" | "b"
>TU : TU

var v00: keyof TP;
>v00 : "a" | "b"
>TP : TP

var v00: keyof TR;
>v00 : "a" | "b"
>TR : TR

var v00: keyof TPR;
>v00 : "a" | "b"
>TPR : TPR

// Validate that non-isomorphic mapped types strip modifiers
var v01: T;
>v01 : T
>T : T

var v01: Pick<TR, keyof T>;
>v01 : T
>Pick : Pick<T, K>
>TR : TR
>T : T

var v01: Pick<Readonly<T>, keyof T>;
>v01 : T
>Pick : Pick<T, K>
>Readonly : Readonly<T>
>T : T
>T : T

// Validate that non-isomorphic mapped types strip modifiers
var v02: TU;
>v02 : TU
>TU : TU

var v02: Pick<TP, keyof T>;
>v02 : TU
>Pick : Pick<T, K>
>TP : TP
>T : T

var v02: Pick<TPR, keyof T>;
>v02 : TU
>Pick : Pick<T, K>
>TPR : TPR
>T : T

var v02: Pick<Partial<T>, keyof T>;
>v02 : TU
>Pick : Pick<T, K>
>Partial : Partial<T>
>T : T
>T : T

var v02: Pick<Partial<Readonly<T>>, keyof T>;
>v02 : TU
>Pick : Pick<T, K>
>Partial : Partial<T>
>Readonly : Readonly<T>
>T : T
>T : T

// Validate that isomorphic mapped types preserve optional modifier
var v03: TP;
>v03 : TP
>TP : TP

var v03: Partial<T>;
>v03 : TP
>Partial : Partial<T>
>T : T

// Validate that isomorphic mapped types preserve readonly modifier
var v04: TR;
>v04 : TR
>TR : TR

var v04: Readonly<T>;
>v04 : TR
>Readonly : Readonly<T>
>T : T

// Validate that isomorphic mapped types preserve both partial and readonly modifiers
var v05: TPR;
>v05 : TPR
>TPR : TPR

var v05: Partial<TR>;
>v05 : TPR
>Partial : Partial<T>
>TR : TR

var v05: Readonly<TP>;
>v05 : TPR
>Readonly : Readonly<T>
>TP : TP

var v05: Partial<Readonly<T>>;
>v05 : TPR
>Partial : Partial<T>
>Readonly : Readonly<T>
>T : T

var v05: Readonly<Partial<T>>;
>v05 : TPR
>Readonly : Readonly<T>
>Partial : Partial<T>
>T : T

type Boxified<T> = { [P in keyof T]: { x: T[P] } };
>Boxified : Boxified<T>
>T : T
>P : P
>T : T
>x : T[P]
>T : T
>P : P

type B = { a: { x: number }, b: { x: string } };
>B : B
>a : { x: number; }
>x : number
>b : { x: string; }
>x : string

type BU = { a: { x: number } | undefined, b: { x: string } | undefined };
>BU : BU
>a : { x: number; } | undefined
>x : number
>b : { x: string; } | undefined
>x : string

type BP = { a?: { x: number }, b?: { x: string } };
>BP : BP
>a : { x: number; } | undefined
>x : number
>b : { x: string; } | undefined
>x : string

type BR = { readonly a: { x: number }, readonly b: { x: string } };
>BR : BR
>a : { x: number; }
>x : number
>b : { x: string; }
>x : string

type BPR = { readonly a?: { x: number }, readonly b?: { x: string } };
>BPR : BPR
>a : { x: number; } | undefined
>x : number
>b : { x: string; } | undefined
>x : string

// Validate they all have the same keys
var b00: "a" | "b";
>b00 : "a" | "b"

var b00: keyof B;
>b00 : "a" | "b"
>B : B

var b00: keyof BU;
>b00 : "a" | "b"
>BU : BU

var b00: keyof BP;
>b00 : "a" | "b"
>BP : BP

var b00: keyof BR;
>b00 : "a" | "b"
>BR : BR

var b00: keyof BPR;
>b00 : "a" | "b"
>BPR : BPR

// Validate that non-isomorphic mapped types strip modifiers
var b01: B;
>b01 : B
>B : B

var b01: Pick<BR, keyof B>;
>b01 : B
>Pick : Pick<T, K>
>BR : BR
>B : B

var b01: Pick<Readonly<BR>, keyof B>;
>b01 : B
>Pick : Pick<T, K>
>Readonly : Readonly<T>
>BR : BR
>B : B

// Validate that non-isomorphic mapped types strip modifiers
var b02: BU;
>b02 : BU
>BU : BU

var b02: Pick<BP, keyof B>;
>b02 : BU
>Pick : Pick<T, K>
>BP : BP
>B : B

var b02: Pick<BPR, keyof B>;
>b02 : BU
>Pick : Pick<T, K>
>BPR : BPR
>B : B

var b02: Pick<Partial<B>, keyof B>;
>b02 : BU
>Pick : Pick<T, K>
>Partial : Partial<T>
>B : B
>B : B

var b02: Pick<Partial<Readonly<B>>, keyof B>;
>b02 : BU
>Pick : Pick<T, K>
>Partial : Partial<T>
>Readonly : Readonly<T>
>B : B
>B : B

// Validate that isomorphic mapped types preserve optional modifier
var b03: BP;
>b03 : BP
>BP : BP

var b03: Partial<B>;
>b03 : BP
>Partial : Partial<T>
>B : B

// Validate that isomorphic mapped types preserve readonly modifier
var b04: BR;
>b04 : BR
>BR : BR

var b04: Readonly<B>;
>b04 : BR
>Readonly : Readonly<T>
>B : B

// Validate that isomorphic mapped types preserve both partial and readonly modifiers
var b05: BPR;
>b05 : BPR
>BPR : BPR

var b05: Partial<BR>;
>b05 : BPR
>Partial : Partial<T>
>BR : BR

var b05: Readonly<BP>;
>b05 : BPR
>Readonly : Readonly<T>
>BP : BP

var b05: Partial<Readonly<B>>;
>b05 : BPR
>Partial : Partial<T>
>Readonly : Readonly<T>
>B : B

var b05: Readonly<Partial<B>>;
>b05 : BPR
>Readonly : Readonly<T>
>Partial : Partial<T>
>B : B

